GridBox F1 Backend

This is the Node + Express server for the backend aspect of the GridBox F1 project.
The project uses the Ergast API to find F1 data that is then stored inside a MongoDB database to reduce API calls.

Features : 
- Get Drivers for a specific year
- Get Constructors for a specific year
- Get Season Schedule for a specific year
- Get Grand Prix Circuits for a specific year
- Get Drivers Standings for a specific year
- Get Constructors Standings for a specific year
- Get Race results
- Get Qualifying results
- Create and Retrieve Articles

The project makes use of Prisma as an ORM to abstract and simplify database operations. 
A Redis DB is used as a cache to reduce API response times.
The 'ergast-client' package is used as an wrapper to call the Ergast API. 
Cloudinary is used to store media and multer + cloudinary's v2 is used to upload provided media to multer.
Helmet is used to add standard security to the server.
CORS is used to block requests from non-whitelisted urls.

API Routes:

- `/api/v1/getDrivers` - To get drivers for a certain year. Pass year in request body.
- `/api/v1/getConstructors` - To get constructors for a certain year. Pass year in request body.
- `/api/v1/getDriverStandings` - To get driver standings for a certain year. Pass year in request body.
- `/api/v1/getConstructorStandings` - To get constructor standings for a certain year. Pass year in request body.
- `/api/v1/getCircuits` - To get circuits for a certain year. Pass year in request body.
- `/api/v1/getSchedule` - To get race schedule for a certain year. Pass year in request body.
- `/api/v1/getRaceResult` - To get the race result for a certain round. Pass year and round in request body.
- `/api/v1/getQualifyingResult` - To get the qualifying result for a certain round. Pass year and round in request body.
- `/api/v1/get-recent-posts` - To get recently written articles. Implement paginated queries on frontend as api returns 4 objects on call.
- `/api/v1/get-post` - To get a specific post. Pass Article UID that was generated to get the post.

All routes except posts are cached.